DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS friendship CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS mpa_rating CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS film_genres CASCADE;

CREATE TABLE IF NOT EXISTS mpa_rating (
    mpa_id INTEGER PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS genre (
    genre_id INTEGER PRIMARY KEY,
    name VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS film (
    film_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(200),
    release_date DATE NOT NULL,
    duration INTEGER,
    mpa_id INTEGER,
    CONSTRAINT fk_film_mpa FOREIGN KEY (mpa_id) REFERENCES mpa_rating(mpa_id)
);

CREATE TABLE IF NOT EXISTS genre_film (
    genre_id INTEGER NOT NULL,
    film_id INTEGER NOT NULL,
    PRIMARY KEY (genre_id, film_id),
    CONSTRAINT fk_genrefilm_genre FOREIGN KEY (genre_id) REFERENCES genre(genre_id),
    CONSTRAINT fk_genrefilm_film FOREIGN KEY (film_id) REFERENCES film(film_id)
);

CREATE TABLE IF NOT EXISTS users (
    user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR NOT NULL UNIQUE,
    login VARCHAR(255) NOT NULL,
    name VARCHAR(255),
    birthday DATE
    );

CREATE UNIQUE INDEX IF NOT EXISTS user_email_uindex ON users (email);
CREATE UNIQUE INDEX IF NOT EXISTS user_login_uindex ON users (login);

CREATE TABLE IF NOT EXISTS friendships (
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    friend_request BOOLEAN,
    PRIMARY KEY (user_id, friend_id),
    CONSTRAINT fk_friendships_user FOREIGN KEY (user_id) REFERENCES users(user_id),
    CONSTRAINT fk_friendships_friend FOREIGN KEY (friend_id) REFERENCES users(user_id)
    );

CREATE TABLE IF NOT EXISTS likes (
    film_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    PRIMARY KEY (film_id, user_id),
    CONSTRAINT fk_like_film FOREIGN KEY (film_id) REFERENCES film(film_id),
    CONSTRAINT fk_like_user FOREIGN KEY (user_id) REFERENCES users(user_id)
    );
